from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import StaleElementReferenceException, ElementClickInterceptedException
import time

# Set up the WebDriver (example uses Chrome)
driver = webdriver.Chrome()

# Open the webpage
driver.get('https://cookr.in/')
print("content loaded")

# Wait for the initial page to fully load
WebDriverWait(driver, 3).until(EC.presence_of_element_located((By.XPATH, "//button | //input | //a | //div | //span | //li")))

# Function to scroll to the bottom of the page and wait for new content to load
def scroll_and_load(driver, wait_time=2):
    last_height = driver.execute_script("return document.body.scrollHeight")
    while True:
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(wait_time)  # Wait for new content to load
        new_height = driver.execute_script("return document.body.scrollHeight")
        if new_height == last_height:
            break
        last_height = new_height

# Scroll to the bottom of the page and load all content
scroll_and_load(driver, wait_time=2)  # Increased wait time for better content loading

# JavaScript to detect event listeners and visible text, including inline handlers
script = """
function getEventListeners(element) {
    var listeners = [];
    var allEvents = Object.keys(window).filter(function(k) { return k.indexOf("on") === 0 });
    allEvents.forEach(function(eventName) {
        var listenersForElement = getEventListenersForElement(element, eventName.slice(2));
        if (listenersForElement.length > 0) {
            listeners.push({event: eventName.slice(2), listeners: listenersForElement});
        }
    });
    return listeners;
}

function getEventListenersForElement(element, eventName) {
    var listeners = [];
    if (typeof jQuery !== 'undefined') {
        var events = jQuery._data(element, "events");
        if (events && events[eventName]) {
            events[eventName].forEach(function(event) {
                listeners.push(event.handler.toString());
            });
        }
    }
    if (element["on" + eventName]) {
        listeners.push(element["on" + eventName].toString());
    }
    return listeners;
}

// Function to check for inline event handlers
function getInlineEventHandlers(element) {
    var inlineHandlers = [];
    var allEvents = Object.keys(window).filter(function(k) { return k.indexOf("on") === 0 });
    allEvents.forEach(function(event) {
        if (element.hasAttribute(event)) {
            inlineHandlers.push({event: event.slice(2), handler: element.getAttribute(event)});
        }
    });
    return inlineHandlers;
}

// Function to get visible text from an element, including nested elements
function getVisibleText(element) {
    return element.innerText.trim();
}

var elements = arguments[0];
var result = [];
elements.forEach(function(element) {
    var elementInfo = {
        tagName: element.tagName,
        outerHTML: element.outerHTML,
        visibleText: getVisibleText(element),
        listeners: getEventListeners(element),
        inlineHandlers: getInlineEventHandlers(element)
    };
    result.push(elementInfo);
});
return result;
"""

# List of possible interactive elements
tags = ["button", "input", "a"]#, "div", "span", "li"]

# Function to find all elements of specified tags
def find_elements(driver, tags):
    elements = []
    for tag in tags:
        elements.extend(driver.find_elements(By.TAG_NAME, tag))
    return elements

# Check for shadow roots and collect elements
def collect_shadow_dom_elements(driver, tags):
    shadow_elements = []
    shadow_hosts = driver.execute_script('return document.querySelectorAll("*")')
    for host in shadow_hosts:
        try:
            shadow_root = driver.execute_script('return arguments[0].shadowRoot', host)
            if shadow_root:
                for tag in tags:
                    shadow_elements.extend(shadow_root.find_elements(By.TAG_NAME, tag))
        except Exception as e:
            print(f"Error accessing shadow DOM: {e}")
    return shadow_elements

# Function to collect clickable elements
def collect_clickable_elements(driver):
    elements = find_elements(driver, tags)
    elements.extend(collect_shadow_dom_elements(driver, tags))
    return elements

# Function to get event listeners and visible text for each element
def get_elements_info(driver, elements):
    return driver.execute_script(script, elements)

def click_element(element):
    try:
        driver.execute_script("arguments[0].scrollIntoView(true);", element)
        time.sleep(1)
        WebDriverWait(driver, 3).until(EC.element_to_be_clickable((By.XPATH, "//*")))

        try:
            element.click()
        except ElementClickInterceptedException:
            # Temporarily hide obstructing elements
            driver.execute_script("document.querySelector('header').style.display = 'none';")
            time.sleep(1)
            element.click()
            # Restore obstructing elements
            driver.execute_script("document.querySelector('header').style.display = 'block';")
        
        time.sleep(5)  # Wait for navigation to complete
        return True
    except StaleElementReferenceException:
        print(f"StaleElementReferenceException: The element is no longer attached to the DOM. Recollecting elements.")
    except Exception as e:
        print(f"Error clicking the element directly: {e}")
        driver.execute_script("arguments[0].click();", element)
        time.sleep(3)
        return True

    return False

def interact_with_page(driver):
    scroll_and_load(driver, wait_time=4)
    clickable_elements = collect_clickable_elements(driver)
    elements_info = get_elements_info(driver, clickable_elements)

    # Filter out elements without visible text and remove duplicates
    seen_elements = set()
    unique_elements_info = []
    unique_clickable_elements = []

    for element_info, element in zip(elements_info, clickable_elements):
        key = (element_info['visibleText'], element_info['tagName'])
        if key not in seen_elements:
            seen_elements.add(key)
            unique_elements_info.append(element_info)
            unique_clickable_elements.append(element)

    # Display clickable elements and ask the user to select one
    print("Available clickable elements:")
    for index, element_info in enumerate(unique_elements_info):
        print(f"{index}: {element_info['visibleText']} (Tag: {element_info['tagName']})")

    selected_index = int(input("Enter the index of the element you want to click: "))

    # Click the selected element and handle special cases
    if 0 <= selected_index < len(unique_clickable_elements):
        element_to_click = unique_clickable_elements[selected_index]
        visible_text = unique_elements_info[selected_index]['visibleText']
        if click_element(element_to_click):
            print(f"Clicked on the element: {visible_text}")
        else:
            print("Failed to click the element.")
        
        # After clicking, prompt to close or continue
        close_browser = input("Do you want to close the browser? (yes/no): ").strip().lower()
        if close_browser == 'yes':
            driver.quit()
            return False
        else:
            return True
    else:
        print("Invalid selection.")
        return True

# Main interaction loop
while interact_with_page(driver):
    pass

# Close the WebDriver
driver.quit()

