from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import json
import time

# Set up the WebDriver (example uses Chrome)
driver = webdriver.Chrome()

# Open the webpage
driver.get('https://www.nike.com/in/')

# Wait for the initial page to fully load
WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.TAG_NAME, 'button')))

# Function to scroll to the bottom of the page and wait for new content to load
def scroll_and_load(driver, wait_time=2):
    last_height = driver.execute_script("return document.body.scrollHeight")
    while True:
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(wait_time)  # Wait for new content to load
        new_height = driver.execute_script("return document.body.scrollHeight")
        if new_height == last_height:
            break
        last_height = new_height

# Scroll to the bottom of the page and load all content
scroll_and_load(driver, wait_time=4)  # Increased wait time for better content loading

# JavaScript to detect event listeners and visible text, including inline handlers
script = """
function getEventListeners(element) {
    var listeners = [];
    var allEvents = Object.keys(window).filter(function(k) { return k.indexOf("on") === 0 });
    allEvents.forEach(function(eventName) {
        var listenersForElement = getEventListenersForElement(element, eventName.slice(2));
        if (listenersForElement.length > 0) {
            listeners.push({event: eventName.slice(2), listeners: listenersForElement});
        }
    });
    return listeners;
}

function getEventListenersForElement(element, eventName) {
    var listeners = [];
    if (typeof jQuery !== 'undefined') {
        var events = jQuery._data(element, "events");
        if (events && events[eventName]) {
            events[eventName].forEach(function(event) {
                listeners.push(event.handler.toString());
            });
        }
    }
    if (element["on" + eventName]) {
        listeners.push(element["on" + eventName].toString());
    }
    return listeners;
}

// Function to check for inline event handlers
function getInlineEventHandlers(element) {
    var inlineHandlers = [];
    var allEvents = Object.keys(window).filter(function(k) { return k.indexOf("on") === 0 });
    allEvents.forEach(function(event) {
        if (element.hasAttribute(event)) {
            inlineHandlers.push({event: event.slice(2), handler: element.getAttribute(event)});
        }
    });
    return inlineHandlers;
}

// Function to get visible text from an element, including nested elements
function getVisibleText(element) {
    return element.innerText.trim();
}

var elements = arguments[0];
var result = [];
elements.forEach(function(element) {
    var elementInfo = {
        tagName: element.tagName,
        outerHTML: element.outerHTML,
        visibleText: getVisibleText(element),
        listeners: getEventListeners(element),
        inlineHandlers: getInlineEventHandlers(element)
    };
    result.push(elementInfo);
});
return result;
"""

# List of possible interactive elements
tags = ["button", "input", "a", "div", "span", "li"]

# Find all elements of the specified tags
elements = []
for tag in tags:
    elements.extend(driver.find_elements(By.TAG_NAME, tag))

# Check for iframes and switch context if necessary
def switch_to_iframes_and_collect_elements(driver, tags):
    collected_elements = []
    iframes = driver.find_elements(By.TAG_NAME, 'iframe')
    for iframe in iframes:
        driver.switch_to.frame(iframe)
        for tag in tags:
            collected_elements.extend(driver.find_elements(By.TAG_NAME, tag))
        driver.switch_to.default_content()
    return collected_elements

# Collect elements from main context and iframes
elements.extend(switch_to_iframes_and_collect_elements(driver, tags))

# Check for shadow roots and collect elements
def collect_shadow_dom_elements(driver, tags):
    shadow_elements = []
    shadow_hosts = driver.execute_script('return document.querySelectorAll("*")')
    for host in shadow_hosts:
        try:
            shadow_root = driver.execute_script('return arguments[0].shadowRoot', host)
            if shadow_root:
                for tag in tags:
                    shadow_elements.extend(shadow_root.find_elements(By.TAG_NAME, tag))
        except Exception as e:
            print(f"Error accessing shadow DOM: {e}")
    return shadow_elements

elements.extend(collect_shadow_dom_elements(driver, tags))

# Get event listeners and visible text for each element
elements_info = driver.execute_script(script, elements)

# Print out the information
print(json.dumps(elements_info, indent=4))

# Close the WebDriver
driver.quit()

